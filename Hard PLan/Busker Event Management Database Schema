-- Busker Event Management Database Schema
-- Run this script in your MySQL/PostgreSQL localhost

-- Create the database
CREATE DATABASE busker_management;
USE busker_management;

-- 1. Time Slot Table
CREATE TABLE time_slot (
    time_slot_id INT PRIMARY KEY AUTO_INCREMENT,
    time TIME NOT NULL
);

-- 2. Location Table
CREATE TABLE location (
    location_id INT PRIMARY KEY AUTO_INCREMENT,
    address VARCHAR(255) NOT NULL,
    barangay VARCHAR(100) NOT NULL,
    region VARCHAR(100) NOT NULL
);

-- 3. Genre Table
CREATE TABLE genre (
    genre_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL UNIQUE,
    description TEXT
);

-- 4. Client Table
CREATE TABLE client (
    client_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    phone VARCHAR(20) NOT NULL
);

-- 5. Busker Table
CREATE TABLE busker (
    busker_id INT PRIMARY KEY AUTO_INCREMENT,
    band_name VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    contact_number VARCHAR(20) NOT NULL,
    address VARCHAR(255),
    birthday DATE,
    has_equipment BOOLEAN DEFAULT FALSE,
    status ENUM('Active', 'Inactive', 'Busy', 'On Break') DEFAULT 'Active',
    profile_picture VARCHAR(500),
    bio TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 6. Busker Genre Junction Table (Many-to-Many)
CREATE TABLE busker_genre (
    busker_genre_id INT PRIMARY KEY AUTO_INCREMENT,
    busker_id INT NOT NULL,
    genre_id INT NOT NULL,
    FOREIGN KEY (busker_id) REFERENCES busker(busker_id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genre(genre_id) ON DELETE CASCADE,
    UNIQUE KEY unique_busker_genre (busker_id, genre_id)
);

-- 7. Busker Equipment Table
CREATE TABLE busker_equipment (
    equipment_id INT PRIMARY KEY AUTO_INCREMENT,
    busker_id INT NOT NULL,
    eqpt_name VARCHAR(255) NOT NULL,
    quantity INT DEFAULT 1,
    condition VARCHAR(50) DEFAULT 'Good',
    FOREIGN KEY (busker_id) REFERENCES busker(busker_id) ON DELETE CASCADE
);

-- 8. Event Table
CREATE TABLE event (
    event_id INT PRIMARY KEY AUTO_INCREMENT,
    event_name VARCHAR(255) NOT NULL,
    event_type VARCHAR(100) NOT NULL,
    event_date DATE NOT NULL,
    time_slot_id INT NOT NULL,
    location_id INT NOT NULL,
    venue_equipment TEXT,
    docs_id INT,
    description TEXT,
    expected_attendees INT,
    event_status ENUM('Planned', 'Confirmed', 'Ongoing', 'Completed', 'Cancelled') DEFAULT 'Planned',
    FOREIGN KEY (time_slot_id) REFERENCES time_slot(time_slot_id),
    FOREIGN KEY (location_id) REFERENCES location(location_id)
);

-- 9. Supporting Document Table
CREATE TABLE supporting_document (
    docs_id INT PRIMARY KEY AUTO_INCREMENT,
    doc_link VARCHAR(500) NOT NULL
);

-- Add foreign key constraint for event.docs_id after supporting_document is created
ALTER TABLE event 
ADD FOREIGN KEY (docs_id) REFERENCES supporting_document(docs_id);

-- 10. Inquiry Table
CREATE TABLE inquiry (
    inquiry_id INT PRIMARY KEY AUTO_INCREMENT,
    client_id INT NOT NULL,
    event_id INT NOT NULL,
    inquiry_genre_id INT,
    budget INT,
    inquiry_status VARCHAR(50) DEFAULT 'Pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (client_id) REFERENCES client(client_id),
    FOREIGN KEY (event_id) REFERENCES event(event_id)
);

-- 11. Inquiry Genre Junction Table
CREATE TABLE inquiry_genre (
    inquiry_genre_id INT PRIMARY KEY AUTO_INCREMENT,
    genre_id INT NOT NULL,
    FOREIGN KEY (genre_id) REFERENCES genre(genre_id)
);

-- Add foreign key constraint for inquiry.inquiry_genre_id
ALTER TABLE inquiry 
ADD FOREIGN KEY (inquiry_genre_id) REFERENCES inquiry_genre(inquiry_genre_id);

-- 12. Hire Table
CREATE TABLE hire (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    inquiry_id INT NOT NULL,
    busker_id INT NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    payment_status VARCHAR(50) DEFAULT 'Pending',
    payment_method ENUM('Cash', 'Bank Transfer', 'GCash', 'PayPal', 'Credit Card') DEFAULT 'Cash',
    performance_time TIME,
    contract_details TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (inquiry_id) REFERENCES inquiry(inquiry_id),
    FOREIGN KEY (busker_id) REFERENCES busker(busker_id)
);

-- 13. Review Table
CREATE TABLE review (
    review_id INT PRIMARY KEY AUTO_INCREMENT,
    inquiry_id INT NOT NULL,
    reviewed_by VARCHAR(255) NOT NULL,
    date DATE NOT NULL,
    message TEXT,
    rating INT CHECK (rating >= 1 AND rating <= 5),
    FOREIGN KEY (inquiry_id) REFERENCES inquiry(inquiry_id)
);

-- Insert sample time slots
INSERT INTO time_slot (time) VALUES 
('09:00:00'), ('10:00:00'), ('11:00:00'), ('14:00:00'), 
('15:00:00'), ('16:00:00'), ('18:00:00'), ('19:00:00'), ('20:00:00');

-- Insert sample genres
INSERT INTO genre (name, description) VALUES 
('Rock', 'Electric guitar-driven music with strong rhythm'),
('Pop', 'Popular mainstream music with catchy melodies'),
('Jazz', 'Improvisational music with complex harmonies'),
('Folk', 'Traditional acoustic music with storytelling'),
('Classical', 'Traditional Western art music'),
('Blues', 'Soulful music expressing emotions and struggles');

-- Insert sample locations
INSERT INTO location (address, barangay, region) VALUES 
('Rizal Park', 'Ermita', 'Metro Manila'),
('Ayala Triangle Gardens', 'Makati', 'Metro Manila'),
('UP Diliman Sunken Garden', 'Diliman', 'Metro Manila');

-- Create indexes for better performance
CREATE INDEX idx_event_date ON event(event_date);
CREATE INDEX idx_inquiry_status ON inquiry(inquiry_status);
CREATE INDEX idx_hire_payment_status ON hire(payment_status);
CREATE INDEX idx_busker_band_name ON busker(band_name);
CREATE INDEX idx_client_email ON client(email);

-- Display table structure
SHOW TABLES;