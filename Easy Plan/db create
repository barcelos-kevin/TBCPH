-- Event Management Database Schema
-- Drop tables if they exist (in reverse order of dependencies)
DROP TABLE IF EXISTS review;
DROP TABLE IF EXISTS hire;
DROP TABLE IF EXISTS busker_equipment;
DROP TABLE IF EXISTS busker_genre;
DROP TABLE IF EXISTS inquiry_genre;
DROP TABLE IF EXISTS inquiry;
DROP TABLE IF EXISTS supporting_document;
DROP TABLE IF EXISTS event;
DROP TABLE IF EXISTS busker;
DROP TABLE IF EXISTS genre;
DROP TABLE IF EXISTS client;
DROP TABLE IF EXISTS time_slot;
DROP TABLE IF EXISTS location;
DROP TABLE IF EXISTS admin;

-- Create Admin table
CREATE TABLE admin (
    email VARCHAR(255) PRIMARY KEY,
    password VARCHAR(255) NOT NULL
);

-- Create Location table
CREATE TABLE location (
    location_id INT PRIMARY KEY AUTO_INCREMENT,
    address VARCHAR(500) NOT NULL,
    barangay VARCHAR(100) NOT NULL,
    region VARCHAR(100) NOT NULL
);

-- Create Time Slot table
CREATE TABLE time_slot (
    time_slot_id INT PRIMARY KEY AUTO_INCREMENT,
    time TIME NOT NULL
);

-- Create Client table
CREATE TABLE client (
    client_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(50),
    password VARCHAR(255) NOT NULL
);

-- Create Genre table
CREATE TABLE genre (
    genre_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    description TEXT
);

-- Create Busker table
CREATE TABLE busker (
    busker_id INT PRIMARY KEY AUTO_INCREMENT,
    band_name VARCHAR(255),
    name VARCHAR(255) NOT NULL,
    contact_number VARCHAR(50),
    address VARCHAR(500),
    birthday DATE,
    has_equipment BOOLEAN DEFAULT FALSE,
    status VARCHAR(50),
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL
);

-- Create Event table
CREATE TABLE event (
    event_id INT PRIMARY KEY AUTO_INCREMENT,
    event_name VARCHAR(255) NOT NULL,
    event_type VARCHAR(100),
    event_date DATE NOT NULL,
    time_slot_id INT,
    location_id INT,
    venue_equipment VARCHAR(500),
    description TEXT,
    FOREIGN KEY (time_slot_id) REFERENCES time_slot(time_slot_id),
    FOREIGN KEY (location_id) REFERENCES location(location_id)
);

-- Create Supporting Document table
CREATE TABLE supporting_document (
    docs_id INT PRIMARY KEY AUTO_INCREMENT,
    doc_link VARCHAR(500) NOT NULL
);

-- Create Inquiry table
CREATE TABLE inquiry (
    inquiry_id INT PRIMARY KEY AUTO_INCREMENT,
    client_id INT NOT NULL,
    event_id INT,
    inquiry_date_id INT,
    budget INT,
    inquiry_status VARCHAR(50),
    docs_id INT,
    FOREIGN KEY (client_id) REFERENCES client(client_id),
    FOREIGN KEY (event_id) REFERENCES event(event_id),
    FOREIGN KEY (docs_id) REFERENCES supporting_document(docs_id)
);

-- Create Inquiry Genre junction table (many-to-many)
CREATE TABLE inquiry_genre (
    inquiry_genre_id INT PRIMARY KEY AUTO_INCREMENT,
    inquiry_id INT NOT NULL,
    genre_id INT NOT NULL,
    FOREIGN KEY (inquiry_id) REFERENCES inquiry(inquiry_id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genre(genre_id) ON DELETE CASCADE,
    UNIQUE KEY unique_inquiry_genre (inquiry_id, genre_id)
);

-- Create Busker Genre junction table (many-to-many)
CREATE TABLE busker_genre (
    busker_genre_id INT PRIMARY KEY AUTO_INCREMENT,
    busker_id INT NOT NULL,
    genre_id INT NOT NULL,
    FOREIGN KEY (busker_id) REFERENCES busker(busker_id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genre(genre_id) ON DELETE CASCADE,
    UNIQUE KEY unique_busker_genre (busker_id, genre_id)
);

-- Create Busker Equipment table
CREATE TABLE busker_equipment (
    equipment_id INT PRIMARY KEY AUTO_INCREMENT,
    busker_id INT NOT NULL,
    equipment_name VARCHAR(255) NOT NULL,
    quantity VARCHAR(50),
    condition VARCHAR(100),
    FOREIGN KEY (busker_id) REFERENCES busker(busker_id) ON DELETE CASCADE
);

-- Create Hire table
CREATE TABLE hire (
    order_id INT PRIMARY KEY AUTO_INCREMENT,
    inquiry_id INT NOT NULL,
    busker_id INT NOT NULL,
    price INT,
    payment_status VARCHAR(50),
    performance_time TIME,
    payment_method VARCHAR(100),
    FOREIGN KEY (inquiry_id) REFERENCES inquiry(inquiry_id),
    FOREIGN KEY (busker_id) REFERENCES busker(busker_id)
);

-- Create Review table
CREATE TABLE review (
    review_id INT PRIMARY KEY AUTO_INCREMENT,
    inquiry_id INT NOT NULL,
    reviewed_by VARCHAR(255),
    date DATE,
    message TEXT,
    FOREIGN KEY (inquiry_id) REFERENCES inquiry(inquiry_id)
);

-- Insert sample data for Admin
INSERT INTO admin (email, password) VALUES 
('admin@eventmanagement.com', 'admin123');

-- Insert sample data for Time Slots
INSERT INTO time_slot (time) VALUES 
('09:00:00'), ('10:00:00'), ('11:00:00'), ('14:00:00'), ('15:00:00'), ('16:00:00'), ('19:00:00'), ('20:00:00');

-- Insert sample data for Locations
INSERT INTO location (address, barangay, region) VALUES 
('Rizal Park', 'Ermita', 'NCR'),
('SM Mall of Asia Concert Grounds', 'Pasay', 'NCR'),
('Ayala Triangle Gardens', 'Makati', 'NCR');

-- Insert sample data for Genres
INSERT INTO genre (name, description) VALUES 
('Rock', 'Rock music genre'),
('Pop', 'Popular music genre'),
('Jazz', 'Jazz music genre'),
('Folk', 'Folk music genre'),
('Classical', 'Classical music genre'),
('Electronic', 'Electronic music genre');

-- Insert sample data for Clients
INSERT INTO client (name, email, phone, password) VALUES 
('Juan dela Cruz', 'juan@email.com', '+639123456789', 'hashed_password'),
('Maria Santos', 'maria@email.com', '+639987654321', 'hashed_password'),
('Pedro Reyes', 'pedro@email.com', '+639111222333', 'hashed_password');

-- Insert sample data for Buskers
INSERT INTO busker (band_name, name, contact_number, address, birthday, has_equipment, status, password, email) VALUES 
('The Manila Sound', 'Carlos Rivera', '+639555666777', '123 Music St, Manila', '1990-05-15', TRUE, 'active', 'hashed_password', 'carlos@email.com'),
('Solo Artist', 'Ana Mendoza', '+639444555666', '456 Artist Ave, Quezon City', '1995-08-22', FALSE, 'active', 'hashed_password', 'ana@email.com'),
('Street Performers', 'Miguel Torres', '+639333444555', '789 Performance Blvd, Makati', '1988-12-10', TRUE, 'active', 'hashed_password', 'miguel@email.com');